version: "3.11"

services:
  postgres:
    image: postgres
    container_name: postgres
    volumes:
      - .data/:/var/lib/postgresql/
    restart: always
    ports:
      - "${DB_PORT}:${DB_PORT}"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME} -p ${DB_PORT} -d ${DB_NAME}"]
      interval: 15s
      timeout: 5s
      retries: 5
    environment:
      - POSTGRES_USER=${DB_USERNAME}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
      - PGPORT=${DB_PORT}
    env_file:
      - .env

  rabbitmq:
    container_name: rabbitmq
    hostname: rabbitmq
    build:
      context: .
      dockerfile: Rabbitmq.Dockerfile
      args:
        - RABBITMQ_MANAGEMENT_PORT=${RABBITMQ_MANAGEMENT_PORT}
        - RABBITMQ_PORT=${RABBITMQ_PORT}
    restart: always
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 15s
      timeout: 5s
      retries: 5
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
      - RABBITMQ_DEFAULT_VHOST=/
    env_file:
      - .env
    ports:
      - "${RABBITMQ_MANAGEMENT_PORT}:${RABBITMQ_MANAGEMENT_PORT}"


  worker:
    container_name: worker
    hostname: worker
    build: .
    healthcheck:
      test: ["CMD-SHELL", "celery inspect ping --destination celery@worker"]
      interval: 30s
      start_period: 10s
      timeout: 30s
      retries: 3
    command: celery -A app.main.celery worker --loglevel=info
    depends_on:
      rabbitmq:
          condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
    volumes:
      - .:/app
    env_file:
      - .env

  fastapi:
    container_name: fastapi
    build: .
    volumes:
      - .:/app
    ports:
      - "${FASTAPI_PORT}:${FASTAPI_PORT}"
    expose:
      - "${FASTAPI_PORT}"
    env_file:
      - .env
    command: sh -c "uvicorn app.main:app --host ${FASTAPI_HOST} --port ${FASTAPI_PORT} --reload"
    depends_on:
      postgres:
        condition: service_healthy

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    restart: always
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
      - PGADMIN_LISTEN_PORT=${PGADMIN_PORT}
    ports:
      - "${PGADMIN_PORT}:${PGADMIN_PORT}"
    expose:
      - "${PGADMIN_PORT}"
    depends_on:
    - postgres
    env_file:
      - .env

  flower:
    container_name: flower
#    image: mher/flower:latest
    build: .
    command: celery -A app.main.celery flower --port=${FLOWER_PORT}
    ports:
      - "${FLOWER_PORT}:${FLOWER_PORT}"
    environment:
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
    depends_on:
      worker:
        condition: service_healthy
    env_file:
      - .env

  beat:
    container_name: beat
    build: .
    command: celery -A app.main.celery beat --loglevel=info
    depends_on:
      worker:
        condition: service_healthy
    env_file:
      - .env
    environment:
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
    volumes:
      - .:/app
